
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00000468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157f  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d1  00000000  00000000  000024d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000762  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b60  00000000  00000000  0000364a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000041aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 81 01 	call	0x302	; 0x302 <main>
  8a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Private_LCDHalfPort>:
void LCD_voidWriteString(u8* copy_pu8String){
	while(*copy_pu8String!='\0'){
		LCD_SendData(*copy_pu8String);  //last2
		(copy_pu8String++);
	}
}	
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	68 2f       	mov	r22, r24
  98:	61 70       	andi	r22, 0x01	; 1
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
  a0:	c1 fb       	bst	r28, 1
  a2:	66 27       	eor	r22, r22
  a4:	60 f9       	bld	r22, 0
  a6:	89 e0       	ldi	r24, 0x09	; 9
  a8:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
  ac:	c2 fb       	bst	r28, 2
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
  b8:	c3 fb       	bst	r28, 3
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <LCD_SendData>:
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
  d4:	8c 2f       	mov	r24, r28
  d6:	82 95       	swap	r24
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	0e 94 49 00 	call	0x92	; 0x92 <Private_LCDHalfPort>
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_SendData+0x20>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
  f4:	8c 2f       	mov	r24, r28
  f6:	0e 94 49 00 	call	0x92	; 0x92 <Private_LCDHalfPort>
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_SendData+0x3c>
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <LCD_SendCommend>:
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 120:	8c 2f       	mov	r24, r28
 122:	82 95       	swap	r24
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	0e 94 49 00 	call	0x92	; 0x92 <Private_LCDHalfPort>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_SendCommend+0x20>
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 49 00 	call	0x92	; 0x92 <Private_LCDHalfPort>
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	8a 95       	dec	r24
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_SendCommend+0x3c>
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_init>:
 160:	8d e2       	ldi	r24, 0x2D	; 45
 162:	92 e2       	ldi	r25, 0x22	; 34
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_init+0x4>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_init+0xa>
 16a:	00 00       	nop
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 49 00 	call	0x92	; 0x92 <Private_LCDHalfPort>
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 17a:	89 ef       	ldi	r24, 0xF9	; 249
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_init+0x1e>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_init+0x24>
 184:	00 00       	nop
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
 18e:	88 e2       	ldi	r24, 0x28	; 40
 190:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_SendCommend>
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	9a 95       	dec	r25
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_init+0x36>
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_SendCommend>
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_init+0x42>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_SendCommend>
 1ac:	83 ef       	ldi	r24, 0xF3	; 243
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_init+0x50>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_init+0x56>
 1b6:	00 00       	nop
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_SendCommend>
 1be:	08 95       	ret

000001c0 <LCD_voidWriteNumber>:




void LCD_voidWriteNumber(u32 copy_u32Number){
 1c0:	8f 92       	push	r8
 1c2:	9f 92       	push	r9
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	64 97       	sbiw	r28, 0x14	; 20
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
	u8 arr[20];
	u8 i = 0;
	for(i=0;copy_u32Number!=0;i++){
 1e4:	61 15       	cp	r22, r1
 1e6:	71 05       	cpc	r23, r1
 1e8:	81 05       	cpc	r24, r1
 1ea:	91 05       	cpc	r25, r1
 1ec:	d9 f1       	breq	.+118    	; 0x264 <LCD_voidWriteNumber+0xa4>
 1ee:	f1 2c       	mov	r15, r1
		arr[i] = (copy_u32Number%10)+48;
 1f0:	0f 2e       	mov	r0, r31
 1f2:	fa e0       	ldi	r31, 0x0A	; 10
 1f4:	8f 2e       	mov	r8, r31
 1f6:	91 2c       	mov	r9, r1
 1f8:	a1 2c       	mov	r10, r1
 1fa:	b1 2c       	mov	r11, r1
 1fc:	f0 2d       	mov	r31, r0
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <LCD_voidWriteNumber+0x42>


void LCD_voidWriteNumber(u32 copy_u32Number){
	u8 arr[20];
	u8 i = 0;
	for(i=0;copy_u32Number!=0;i++){
 200:	f0 2e       	mov	r15, r16
		arr[i] = (copy_u32Number%10)+48;
 202:	01 e0       	ldi	r16, 0x01	; 1
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	0c 0f       	add	r16, r28
 208:	1d 1f       	adc	r17, r29
 20a:	0f 0d       	add	r16, r15
 20c:	11 1d       	adc	r17, r1
 20e:	a5 01       	movw	r20, r10
 210:	94 01       	movw	r18, r8
 212:	0e 94 c2 01 	call	0x384	; 0x384 <__udivmodsi4>
 216:	60 5d       	subi	r22, 0xD0	; 208
 218:	f8 01       	movw	r30, r16
 21a:	60 83       	st	Z, r22
		//LCD_SendData(arr[i]);
		copy_u32Number/=10;
 21c:	62 2f       	mov	r22, r18
 21e:	73 2f       	mov	r23, r19
 220:	84 2f       	mov	r24, r20
 222:	95 2f       	mov	r25, r21


void LCD_voidWriteNumber(u32 copy_u32Number){
	u8 arr[20];
	u8 i = 0;
	for(i=0;copy_u32Number!=0;i++){
 224:	01 e0       	ldi	r16, 0x01	; 1
 226:	0f 0d       	add	r16, r15
 228:	61 15       	cp	r22, r1
 22a:	71 05       	cpc	r23, r1
 22c:	81 05       	cpc	r24, r1
 22e:	91 05       	cpc	r25, r1
 230:	39 f7       	brne	.-50     	; 0x200 <LCD_voidWriteNumber+0x40>
		arr[i] = (copy_u32Number%10)+48;
		//LCD_SendData(arr[i]);
		copy_u32Number/=10;
	}
	for(u8 j=0;j<i;j++){
 232:	00 23       	and	r16, r16
 234:	b9 f0       	breq	.+46     	; 0x264 <LCD_voidWriteNumber+0xa4>
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	c8 01       	movw	r24, r16
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	2c 0f       	add	r18, r28
 242:	3d 1f       	adc	r19, r29
 244:	02 0f       	add	r16, r18
 246:	13 1f       	adc	r17, r19
 248:	fc 01       	movw	r30, r24
 24a:	ef 19       	sub	r30, r15
 24c:	f1 09       	sbc	r31, r1
 24e:	7f 01       	movw	r14, r30
 250:	e2 0e       	add	r14, r18
 252:	f3 1e       	adc	r15, r19
		LCD_SendData(arr[i-j-1]);
 254:	f8 01       	movw	r30, r16
 256:	82 91       	ld	r24, -Z
 258:	8f 01       	movw	r16, r30
 25a:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_SendData>
	for(i=0;copy_u32Number!=0;i++){
		arr[i] = (copy_u32Number%10)+48;
		//LCD_SendData(arr[i]);
		copy_u32Number/=10;
	}
	for(u8 j=0;j<i;j++){
 25e:	0e 15       	cp	r16, r14
 260:	1f 05       	cpc	r17, r15
 262:	c1 f7       	brne	.-16     	; 0x254 <LCD_voidWriteNumber+0x94>
		LCD_SendData(arr[i-j-1]);
	}
}
 264:	64 96       	adiw	r28, 0x14	; 20
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	bf 90       	pop	r11
 27e:	af 90       	pop	r10
 280:	9f 90       	pop	r9
 282:	8f 90       	pop	r8
 284:	08 95       	ret

00000286 <ADC_init>:
void ADC_init() {
	

	#if (AUTO_TRIGGER_MODE == DISABLED)
	
	ADC_ADCSRA    =  (1 <<AD_EN) | (1<<ADIE) | ADC_Division_Factor ;
 286:	8f e8       	ldi	r24, 0x8F	; 143
 288:	86 b9       	out	0x06, r24	; 6
 28a:	08 95       	ret

0000028c <ADC_Scan_Single>:
		buffer[CHindex]=ADC_Scan_Single(ptr[ScanGroupId][CHindex]);
	}
}

u16 ADC_Scan_Single(u8 ADC_CH){
	ADC_ADMUX = (VOLTAGE_REFERENCE<<REFS0) | (ADC_ADJUSTMENT<<ADLAR) | ADC_CH;
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	87 b9       	out	0x07, r24	; 7
	SetBit(ADC_ADCSRA,ADSC);
 290:	36 9a       	sbi	0x06, 6	; 6
	//while(ISLOW(ADC_ADCSRA,ADIF));
	SetBit(ADC_ADCSRA,ADIF);
 292:	34 9a       	sbi	0x06, 4	; 6
	return ADC_REG;
 294:	84 b1       	in	r24, 0x04	; 4
 296:	95 b1       	in	r25, 0x05	; 5
 298:	08 95       	ret

0000029a <DIO_WritePinVal>:
}

void DIO_WritePinVal(Pin_Type Pin_ID ,u8 VALUE )
{
	
	Pin_Type Port_Index = Pin_ID / 8;
 29a:	e8 2f       	mov	r30, r24
 29c:	e6 95       	lsr	r30
 29e:	e6 95       	lsr	r30
 2a0:	e6 95       	lsr	r30
	Pin_Type Pin_Index  = Pin_ID % 8;
 2a2:	87 70       	andi	r24, 0x07	; 7
	if (VALUE==HIGH)
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	a9 f4       	brne	.+42     	; 0x2d2 <DIO_WritePinVal+0x38>
	{
		SetBit(*DIO_RegPORT[Port_Index],Pin_Index);
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	e0 5a       	subi	r30, 0xA0	; 160
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	01 90       	ld	r0, Z+
 2b4:	f0 81       	ld	r31, Z
 2b6:	e0 2d       	mov	r30, r0
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	a9 01       	movw	r20, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_WritePinVal+0x2a>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_WritePinVal+0x26>
 2c8:	ca 01       	movw	r24, r20
 2ca:	90 81       	ld	r25, Z
 2cc:	89 2b       	or	r24, r25
 2ce:	80 83       	st	Z, r24
 2d0:	08 95       	ret
	}
	else if (VALUE==LOW)
 2d2:	61 11       	cpse	r22, r1
 2d4:	15 c0       	rjmp	.+42     	; 0x300 <DIO_WritePinVal+0x66>
	{
		ClrBit(*DIO_RegPORT[Port_Index],Pin_Index);
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	e0 5a       	subi	r30, 0xA0	; 160
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	01 90       	ld	r0, Z+
 2e2:	f0 81       	ld	r31, Z
 2e4:	e0 2d       	mov	r30, r0
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	a9 01       	movw	r20, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_WritePinVal+0x58>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_WritePinVal+0x54>
 2f6:	ca 01       	movw	r24, r20
 2f8:	80 95       	com	r24
 2fa:	90 81       	ld	r25, Z
 2fc:	89 23       	and	r24, r25
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <main>:
u8 KeyBad_Retrive;

int main(void)
{
	//DIO_Init();
 	LCD_init();
 302:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_init>
	ADC_init();
 306:	0e 94 43 01 	call	0x286	; 0x286 <ADC_init>
	//int x = 0;


    while(1)
	{
		u32 X = ADC_Scan_Single(0);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 46 01 	call	0x28c	; 0x28c <ADC_Scan_Single>
LCD_voidWriteNumber(X); 
 310:	bc 01       	movw	r22, r24
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_voidWriteNumber>
 31a:	f7 cf       	rjmp	.-18     	; 0x30a <main+0x8>

0000031c <__vector_16>:
}

// 
// 
void __vector_16(void) __attribute__((signal));
void __vector_16(void){
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	  static u8 flag=0;
	  if (flag==1)
 33e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	39 f4       	brne	.+14     	; 0x354 <__vector_16+0x38>
	  {
		  DIO_WritePinVal(Pin_A4,HIGH); 
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
		  flag =0 ;
 34e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 352:	07 c0       	rjmp	.+14     	; 0x362 <__vector_16+0x46>
	  }
	  else{
		  DIO_WritePinVal(Pin_A4,LOW);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_WritePinVal>
		  flag =1 ;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
	  }
}
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__udivmodsi4>:
 384:	a1 e2       	ldi	r26, 0x21	; 33
 386:	1a 2e       	mov	r1, r26
 388:	aa 1b       	sub	r26, r26
 38a:	bb 1b       	sub	r27, r27
 38c:	fd 01       	movw	r30, r26
 38e:	0d c0       	rjmp	.+26     	; 0x3aa <__udivmodsi4_ep>

00000390 <__udivmodsi4_loop>:
 390:	aa 1f       	adc	r26, r26
 392:	bb 1f       	adc	r27, r27
 394:	ee 1f       	adc	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	a2 17       	cp	r26, r18
 39a:	b3 07       	cpc	r27, r19
 39c:	e4 07       	cpc	r30, r20
 39e:	f5 07       	cpc	r31, r21
 3a0:	20 f0       	brcs	.+8      	; 0x3aa <__udivmodsi4_ep>
 3a2:	a2 1b       	sub	r26, r18
 3a4:	b3 0b       	sbc	r27, r19
 3a6:	e4 0b       	sbc	r30, r20
 3a8:	f5 0b       	sbc	r31, r21

000003aa <__udivmodsi4_ep>:
 3aa:	66 1f       	adc	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	1a 94       	dec	r1
 3b4:	69 f7       	brne	.-38     	; 0x390 <__udivmodsi4_loop>
 3b6:	60 95       	com	r22
 3b8:	70 95       	com	r23
 3ba:	80 95       	com	r24
 3bc:	90 95       	com	r25
 3be:	9b 01       	movw	r18, r22
 3c0:	ac 01       	movw	r20, r24
 3c2:	bd 01       	movw	r22, r26
 3c4:	cf 01       	movw	r24, r30
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
